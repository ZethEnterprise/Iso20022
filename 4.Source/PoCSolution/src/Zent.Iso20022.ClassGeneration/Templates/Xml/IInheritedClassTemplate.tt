<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Zent.Iso20022.ModelGeneration.Models.Interfaces" #>
namespace <#= Namespace #>;

<# if(ClassElement.Description is not null){ #>
/// <summary>
<# var classSummaryLines = ClassElement.Description.Split(new[] { "Environment.NewLine", "\r\n", "\n" }, StringSplitOptions.None); #>
<# var lastsummary = classSummaryLines.Last(); #>
<# foreach(var line in classSummaryLines ){ #>
/// <#= line #><# if(!line.Equals(lastsummary)){ #><br/>
<# } #>
<# } #>

/// </summary>
<# } #>
[System.CodeDom.Compiler.GeneratedCodeAttribute("<#= Generator #>", "<#= SoftwareVersion #>")]
[System.ComponentModel.Description("This has been generated on the Model version: <#= ModelVersion #>")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:iso:std:iso:20022:tech:xsd:<#= SchemaVersion #>")]
<# foreach(var heir in ClassElement.Heirs) #>
<#{#>
[System.Xml.Serialization.XmlInclude(typeof(<#= heir #>))]
<#}#>
public partial abstract class <#= ClassElement.ClassName #>
<# if(ClassElement.AtomicHeirs.Count == 0) { #>
{ }
<# } else { #>
{
<# var lastInner = ClassElement.AtomicHeirs.Last(); #>
<# foreach(var atomicHeir in ClassElement.AtomicHeirs) { #>
	public class <#= atomicHeir.Name #> : <#= ClassElement.ClassName #>
	{
		[System.Xml.Serialization.XmlElementAttribute("<#= atomicHeir.AtomicType.PayloadTag #>")]
		public < # = atomicHeir.AtomicType.GetCSharpSyntax() # > Value { get; set; }
	}
<# } #>
}
<# } #>